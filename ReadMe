JAVASCRIPT

1.What is the Scope in JavaScript

Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime..

A). We have 3 type of scopes   Global Scope , Fucntioin Scope, Block scope,
Global scope accessible anywhere Function scope accessible inside function , and Block scope  accessible inside the function 

Scope determines where variables are  defined and where they can be accessed 


2.What is Hoisting Javascript

A). Hosting is the javascript behavior where function and variable declarations are moved to top during the compilation phase 
  
    
//Variable Hositing
    x = 10;
    console.log(x);
    var x;




3.What is the difference between let and var and const
 A). “Var” creates function scoped variable   “Let”  creates the block scoped variable .


function name(params) {
    if (true) {
        var a  = 10;
        console.log(a);
    }
    console.log(a);
}
name();



function name(params) {
    if (true) {
        let b  = 10;
        console.log(b);
    }
    console.log(b);
}
name();


Const Can be assigned only once and its value cannot be changed  afterwords


4.What is the difference between primitiva data type and Non-primative data type.

A) . Primitive Data-type : Strings, Booleans, Numbers,Booleans, Null
Primitive data type can hold the single value .

Primitive data type  immutable Meaning it cannot be changed

Non-Primitive Data-type : Array’s,Objects,Functions,Data,RegExp  

Non-Primitive data type can hold the multiples value .
Non-Primitive data type  mutable Meaning it can be changed
5).What is a callback function
callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action. Let's take a simple example of how to use callback function
    
    function callbackFunction(name) {
      console.log("Hello " + name);
    }
    function outerFunction(callback) {
      let name = prompt("Please enter your name.");
      callback(name);
    }
    outerFunction(callbackFunction);

6).What are closures ?

A closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables.



    function Welcome(name) {
        var greetingInfo = function (message) {
        console.log(message + " " + name);
        };
        return greetingInfo;
    }
    var myFunction = Welcome("John");
    myFunction("Welcome "); //Output: Welcome John
    myFunction("Hello Mr."); //output: Hello Mr.John



7).What is a promise
     A).The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
3 possible states: fulfilled, rejected, or pending.
    
       const promise = new Promise(
    (resolve) => {
        setTimeout(() => {
        resolve("I'm a Promise!");
        }, 5000);
    },
    (reject) => {}
    );


    promise.then((value) => console.log(value));




8).What is the difference between == and === operators
A).The == operator performs a loose equality comparison that performs type coercion .
The === operator, on the other hand, performs a strict equality comparison that does not perform type coercion and requires the operands to have the same type (as well as the same value).
Type coercion in JavaScript can sometimes lead to unexpected results, so it's mostly recommended to use the strict equality operator === instead of the loose equality operator ==
1 == "1"     // true
1 === "1"    // false

9.Event Loop?
TA).The event loop continually checks for pending events and executes callback functions, ensuring that I/O operations don't block the execution of other code.




10).Asynchronous vs Synchronous Programming in JavaScript?
Synchronous :
JavaScript is a single-threaded language, which means that only one task can be executed at a time. synchronous function the code will execute line by line, one after the other.
Asynchronous:

Asynchronous programming in JavaScript allows you to run tasks in the background without blocking the main thread. This can be done using callbacks, promises, or async/await.



REACT

1). Life Cycle Methods




2).What is the difference between state and props?	
Props are used to pass data from a parent component to a child component.
State of a component is an object that holds some information that may change over the lifetime of the component. .

3).
RULES OF HOOKS
Only Call Hooks  at the top level and  Functional Components
Don’t call hooks in inside loops, conditions and nested functions.
Call them hooks in in react 


useState Hook
useState is a React Hook used to add a state variable to component.
Declare a state variable at the top level of your component.


useEffect Hook
The useEffect Hook allows you to perform side effects in components in functional components.
Its a close replacement of ComponentDidMount,ComponentDidUpdate,ComponentWillUnMount
Some examples of side effects are: fetching data, directly updating the DOM, and timers.
useEffect accepts two arguments. The second argument is optional.
useEffect(<function>, <dependency>)


Context Hook
A).Context provides a way to pass data through the component tree without having to pass props down manually at every level.

useReducer Hook
A).UseReducer hooks is used manage the state Management
Its alternative for like useState.
useReducer returns the pair of values [newState,dispatch];
useReducer is relatedto the reducer function
useReducer(reducer,initialState)



REDUX 
Store   =  A store that holds the state of application
Action  = An action that describe the changes in the state of the application

Reducer = A Reducer which actually carries out the state transition dependening on the action






2.What are the differences between Flux and Redux?
Flux
Redux
State is mutable
State is immutable
The Store contains both state and change logic
The Store and change logic are separate
There are multiple stores exist
There is only one store exist
All the stores are disconnected and flat
Single store with hierarchical reducers
It has a singleton dispatcher
There is no concept of dispatcher
React components subscribe to the store
Container components uses connect function




CSS

1) What is the CSS Box model and what are its elements?
Margin - It removes the area around the border. It is transparent.
Border - It represents the area around the padding
Padding - It removes the area around the content. It is transparent.
Content - It represents the content like text, images, etc.



HTML

<article><aside>
<details><figcaption><figure><footer><form><header><main><mark><nav><section><summary><time>



Angular 

1). Angular Promises vs. Observables


Observables
Promises
Emit multiple values over some time.
Emit a single value at a time.
Are lazy: they’re not executed until we subscribe to them using the subscribe() method.
Are not lazy: execute immediately after creation.
Have subscriptions that are cancellable using the unsubscribe() method, which stops the listener from receiving further values.
Are not cancellable.
Provide the map for forEach, filter, reduce, retry, and retryWhen operators.
Don’t provide any operations.
Deliver errors to the subscribers.
Push errors to the child promises.


